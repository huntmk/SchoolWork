NEED HELP WITH WARNSDOFF'S RULE AND BACK TRACKING PURPOSE
Pseudo code
Tour Class{
	//variables
	
	//state is the number that repersents the order in which the knight moved
	state == 0
	
	SUB FUNCTION
	//function that checks availability of next move
	bool isAvailable(){
		if "nextMove" >= 0
			return false
		else
			return true
	}
	

	//check if all squares are above the value -1.
	if (all squares are visited
		print boared
	else
		
	*FUNCTION THAT SOLVES THE TOUR*
	//create tour function that solves the knight's tour, for first 32 moves, use Warnsdoff's heuristic after the first 32 moves.
	tour(){
		while (state <= 32){
			// do warnsdoff rule
		}
		//do exhuastive search below
		//do iteratively for every move thats possible for knight
		if (isAvailable = true)
			square[][] = state++
			//push square coordinates to stack
		else
			//backtrack(pop out coordinates)

		
		//check if all squares are above the value -1.
			if (all squares are visited
				print boared
			else
				//not sure yet
		
		MAIN FUNCTION:
		//Intialize values for board before the tour
		for(int x = 0; x < 8; x++){
			for(int y = 0; y < 8; y++){
				knight[x][y];
				}
		}
		//set postions on board to -1
		 for(int x = 0; x < 8; x++){
			for(int y = 0; y < 8; y++){
				knight[x][y] = -1;
				}
			}
		//function moveIsValid, if 	
		SUB FUNCTION
		bool isValidMove(int x, int y, int knight[][])
			if( x >= 0 and less than 8. y >= 0 and less than 8.){
				return true 
			}else {
				return false;
			}
		TOUR FUNCTION
		while (state <= 32)
			//Warndorff's heuristic(Need help with this)
		else
		...(below)
		if (moveIsValid,(x-2) & (y+1)){
			x-=2;
			y+=1;
			knight[x][y] = state++
			//push knight to stack
		}else 
		if (moveIsValid,(x-1) & (y+2)){
			x-=1;
			y+=2;
			knight[x][y] = state++
			//push knight to stack
		}else
		if (moveIsValid,(x+1) & (y+2)){
			x+=1;
			y+=2;
			knight[x][y] = state++
			//push knight to stack
		}else
		if (moveIsValid,(x+2) & (y+1)){
			x+=2;
			y+=1;
			knight[x][y] = state++
			//push knight to stack
		}else
		if (moveIsValid,(x+2) & (y-1)){
			x+=2;
			y-=1;
			knight[x][y] = state++
			//push knight to stack
		}else
		if (moveIsValid,(x+1) & (y-2)){
			x+=1;
			y-=2;
			knight[x][y] = state++
			//push knight to stack
		}else
		if (moveIsValid,(x-1) & (y-2)){
			x-=1;
			y-=2;
			knight[x][y] = state++
			//push knight to stack
		}else
		if (moveIsValid,(x-2) & (y-1)){
			x-=2;
			y-=1;
			knight[x][y] = state++
			//push knight to stack
		}
		else
			//backtrack(need help with this) else pop out last move from stack 
			
	}
	
	