Notes

*back tracking involving the stack
	*knights postion (i,j)
	*knight can only visit a square once
	*push the knights move to stack
	*while backtracking, unmarkthe squares so that you can visit those squares again
	*singly linked list to store a number of choices of intial conditions for the knight
	*each position on board starts with value of -1
	*using stack to store positions
	*turn off Warndoff's heuristic for the first 32 moves(out of 63)

**TWO MAIN COMPONENTS**
•(i) Implementation of a singly linked list (with associated operations) to store the user inputs concerning the initial positions of the knight. 

•(ii) Solving the knight’s tour problem for each initial position using a stack, backtracking, andusing Warnsdoff’s heuristic for the first 32 moves.

Steps:
Main Function{
setup knight and board
	while knight(is setup) and board is not full{
		do next move
	}
	
	if board is full
		print board
	else 
		print no solution found
	
Stack:
fall 2017 #4



Pseudo code
If (all squares are visited)
	print board
else
...
//state is the number that repersents the order in which the knight moved
state == 0

//Intialize values for board before the tour
for(int x = 0; x < 8; x++)
	for(int y = 0; y < 8; y++)
		knight[x][y];

//function that checks availability of next move
bool isAvailable()
	if "nextMove" >= 0;
		return false
	else
		return true

//create limit function that prevents knight from moving outside of board

//function tour 
tour()
if (isAvailable = true)
	square[][] = state++
	//push square coordinates to stack
else
	//backtrack

//WARNSDOFF RULE
*//xNextMove[] and yMove[] define next move of Knight.
//xNextMove[] is for next value of x coordinate
//yNextMove[] is for next value of y coordinate */
        int xNextMove[] = {2, 1, -1, -2, -2, -1, 1, 2};
        int yNextMove[] = {1, 2, 2, 1, -1, -2, -2, -1};

NOTES TO MAKE:
FIGURE OUT HOW TO CUT OFF Warnsdoff’s heuristic AFTER the first 32 moves.
//
while (state <= 32)
//do warnsdiff rule
}
//do exhaustive search below
If all squares are visited 
    print the solution
Else
   a) Add one of the next moves to solution vector and recursively 
   check if this move leads to a solution. (A Knight can make maximum 
   eight moves. We choose one of the 8 moves in this step).
   b) If the move chosen in the above step doesn't lead to a solution
   then remove this move from the solution vector and try other 
   alternative moves.
   c) If none of the alternatives work then return false (Returning false 
   will remove the previously added item in recursion and if false is 
   returned by the initial call of recursion then "no solution exists" )

//function tour 
tour()
if (isAvailable = true)
	square[][] = state++
	//push square coordinates to stack
else
	//backtrack
*create stack*



// In notebook
//tour matrix
printTour(int paht[8][8])
	int x, y;
	for (x = 0; x < 8; x++)
		for(y= 0; y< 8; y++)
			//output path[x][y] from stack

